parameters:
  name: ''
  pool: ''
  platform: ''

jobs:
  - job: ${{ parameters.name }}
    pool: ${{ parameters.pool }}
    steps:
      - bash: |
          echo '##vso[task.setvariable variable=isTag;]true'
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

      - bash: |
          echo '##vso[task.setvariable variable=isSnapshot;]true'
        condition: and(succeeded(), endsWith(variables['Build.SourceBranch'], '-SNAPSHOT'))

      - script: |
          curl --output ${{ parameters.jdkFile }} -O -J -L ${{ parameters.jdkDownloadUrl }}

      - task: JavaToolInstaller@0
        inputs:
          versionSpec: ${{ parameters.javaVersion }}
          jdkArchitectureOption: x64
          jdkSourceOption: LocalDirectory
          jdkFile: ${{ parameters.jdkFile }}
          jdkDestinationDirectory: $(Agent.ToolsDirectory)/binaries/openjdk
          cleanDestinationDirectory: true

      - task: DownloadSecureFile@1
        name: gpgKeyring
        displayName: 'Download GPG Keyring'
        inputs:
          secureFile: 'keyring.gpg'

      - task: Gradle@2
        condition: succeeded()
        env:
          GPG_KEY_NAME: $(gpg.keyname)
          GPG_PASSPHRASE: $(gpg.passphrase)
          GPG_KEYRING_PATH: $(gpgKeyring.secureFilePath)
          BINJR_BUILD_NUMBER: $(Build.BuildNumber)
          IS_TAG: $(isTag)
          REPO_TAG_NAME: $(Build.SourceBranchName)
        inputs:
          options: '--stacktrace --info'
          gradleWrapperFile: 'gradlew'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: 1.${{ parameters.javaVersion }}
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          tasks: 'signPackageDistribution'

      - task: GithubRelease@0
        condition: and(succeeded(), eq(variables['isTag'], 'true'))
        inputs:
          gitHubConnection: binjr-bot
          repositoryName: binjr/binjr
          action: edit
          tag: $(Build.SourceBranchName)
          assets: |
            $(System.DefaultWorkingDirectory)/build/artifacts/*.dmg
            $(System.DefaultWorkingDirectory)/build/artifacts/*.dmg.asc
            $(System.DefaultWorkingDirectory)/build/artifacts/*.pkg
            $(System.DefaultWorkingDirectory)/build/artifacts/*.pkg.asc
            $(System.DefaultWorkingDirectory)/build/artifacts/*.msi
            $(System.DefaultWorkingDirectory)/build/artifacts/*.msi.asc
            $(System.DefaultWorkingDirectory)/build/artifacts/*.zip
            $(System.DefaultWorkingDirectory)/build/artifacts/*.zip.asc
            $(System.DefaultWorkingDirectory)/build/artifacts/*.tar.gz
            $(System.DefaultWorkingDirectory)/build/artifacts/*.tar.gz.asc
          assetUploadMode: 'replace'
          releaseNotesSource: 'file'
          releaseNotesFile: $(System.DefaultWorkingDirectory)/UNRELEASED.md
          addChangeLog: false
          isPreRelease: $(isSnapshot)

      - bash: |
          echo "**************************************"
          echo "* Install dependencies"
          echo "**************************************"
          sudo apt install gnupg1 gpgv1 aptly createrepo
          echo "**************************************"
          echo "* GPG setup"
          echo "**************************************"
          sudo cp /usr/bin/gpg /usr/bin/gpg_
          echo -e '#!/bin/bash\ngpg1 --batch --no-tty --passphrase "$(gpg.package.passphrase)" "$@"' | sudo tee /usr/bin/gpg > /dev/null
          sudo chmod +x /usr/bin/gpg
          gpg --import $(gpgKeyring.secureFilePath)
          echo "**************************************"
          echo "* Generate apt repo"
          echo "**************************************"
          aptly --distribution="stable" --comment="binjr apt repository" repo create binjr
          aptly repo add binjr  $(System.DefaultWorkingDirectory)/build/artifacts/binjr-*_linux-amd64.deb
          aptly -gpg-key="$(gpg.package.keyname)" publish repo binjr
          echo "**************************************"
          echo "* Signing rpm"
          echo "**************************************"
          echo "%_gpg_name $(gpg.package.keyname)" >> ~/.rpmmacros
          rpm --addsign -v build/artifacts/binjr-*_linux-amd64.rpm
          echo "**************************************"
          echo "* Cloning repos.binjr.eu"
          echo "**************************************"
          git clone https://github.com/binjr/repos.binjr.eu.git build/tmp/repos.binjr.eu
          cd  build/tmp/repos.binjr.eu
          git config credential.helper store
          echo "https://binjr-bot:$(gh.access.token)@github.com" >> "$HOME/.git-credentials"
          git config user.email "binjr.bot@free.fr"
          git config user.name "binjr-bot"
          rm -rf apt/dists
          rm -rf apt/pool
          cp -r ~/.aptly/public/dists apt/dists
          cp -r ~/.aptly/public/pool apt/pool
          rm -rf rpm/stable
          mkdir rpm/stable
          cp $(System.DefaultWorkingDirectory)/build/artifacts/binjr-*_linux-amd64.rpm rpm/stable
          echo "**************************************"
          echo "* Generate rpm repo"
          echo "**************************************"
          sudo createrepo -v rpm/stable
          sudo gpg -u $(gpg.package.keyname) --detach-sign --armor rpm/stable/repodata/repomd.xml
          sudo shred -z /usr/bin/gpg
          sudo cp /usr/bin/gpg_ /usr/bin/gpg
          cp $(System.DefaultWorkingDirectory)/distribution/bundlers/linux_rpm/binjr.repo rpm/binjr.repo
          echo "**************************************"
          echo "* Upload to repos.binjr.eu"
          echo "**************************************"
          git add .
          git commit --amend -am "Release  $BUILD_SOURCEBRANCHNAME"
          git push -f
        condition: and(succeeded(), eq(variables['isTag'], 'true'), ne(variables['isSnapshot'], 'true'), not(contains(variables['Build.SourceBranch'], '-b')), eq(variables['Agent.OS'], 'Linux'))




