import java.text.SimpleDateFormat

/*
 *    Copyright 2018-2019 Frederic Thevenet
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id "de.undercouch.download" version "3.4.3"
    id "org.kordamp.markdown.convert" version "1.2.0"
    id 'io.codearte.nexus-staging' version '0.21.0'
    id "de.marcphilipp.nexus-publish" version "0.2.0" apply false
}

ext.IS_TAG = System.getenv('IS_TAG') != null ? System.getenv('IS_TAG') == "true" : false
ext.IS_RELEASE = IS_TAG && !(System.getenv('REPO_TAG_NAME').endsWith('-SNAPSHOT'))
ext.BINJR_VERSION_STEM = "2.5.0"
ext.BINJR_VERSION = "${BINJR_VERSION_STEM}${IS_RELEASE ? '' : '-SNAPSHOT'}"
ext.BINJR_BUILD_NUMBER = System.getenv('BINJR_BUILD_NUMBER') == null ? ("000") : System.getenv('BINJR_BUILD_NUMBER')
ext.GROUP_ID = 'eu.binjr'
ext.LICENSE_NAME = 'Apache License, Version 2.0'
ext.LICENSE_URL = 'http ://www.apache.org/licenses/LICENSE-2.0.txt'
ext.LICENSE_DISTRIBUTION = 'repo'
ext.OS_NAME = System.getProperty("os.name").toLowerCase()
ext.OS_ARCH = System.getProperty("os.arch")
ext.IS_64 = OS_ARCH.toLowerCase().contains("64")
ext.IS_MAC = OS_NAME.contains("mac") || OS_NAME.contains("darwin")
ext.IS_WINDOWS = OS_NAME.contains("windows")
ext.IS_LINUX = OS_NAME.contains("linux")
ext.OS_FAMILY = IS_MAC ? 'mac' : IS_WINDOWS ? 'windows' : IS_LINUX ? 'linux' : 'unsupported'
ext.JDK_HOME = System.getProperty("java.home")
ext.OPENJFX_VERSION = "12.0.1"
ext.OPENJFX_PLATEFORM_CLASSIFIER = IS_MAC ? 'mac' : IS_WINDOWS ? 'win' : IS_LINUX ? 'linux' : 'unsupported'
ext.OPENJFX_JMODS_DOWNLOAD_URL = "https://gluonhq.com/download/javafx-${OPENJFX_VERSION.replace(".", "-")}-jmods-${OS_FAMILY}"
ext.JLINK_ADD_MODULES = "javafx.controls," +
        "javafx.fxml," +
        "javafx.swing," +
        "java.base," +
        "java.prefs," +
        "java.sql," +
        "java.xml," +
        "java.management," +
        "java.rmi," +
        "jdk.localedata," +
        "java.management.rmi," +
        "jdk.management.agent," +
        "jdk.security.auth,jdk.management," +
        "jdk.management.jfr," +
        "jdk.zipfs," +
        "jdk.unsupported.desktop," +
        "jdk.crypto.ec," +
        "jdk.crypto.cryptoki" +
        "${IS_WINDOWS ? ",jdk.crypto.mscapi" : ""}"

ext.DISTRIBUTION_NAME = "${project.name}-${BINJR_VERSION}_${OS_FAMILY}-${OS_ARCH}"
ext.DISTRIBUTION_ROOT = "${buildDir}/distributions/${DISTRIBUTION_NAME}"
ext.DISTRIBUTION_PATH = IS_WINDOWS ? "${DISTRIBUTION_ROOT}" : "${DISTRIBUTION_ROOT}/${BINJR_VERSION}"

ext."signing.keyId" = System.getenv('GPG_KEY_NAME')
ext."signing.secretKeyRingFile" = "${System.getProperty("user.home")}/.gnupg/secring.gpg"
ext."signing.password" = System.getenv('GPG_PASSPHRASE')

ext.WIX_HOME = System.getenv("WIX")

System.out.println("Building version: ${BINJR_VERSION}")
System.out.println("Is tag:${System.getenv('IS_TAG')}")
System.out.println("Tag name:${System.getenv('REPO_TAG_NAME')}")

if (IS_TAG && System.getenv('REPO_TAG_NAME') != "v${BINJR_VERSION}") {
    throw new GradleException("Tag name [${System.getenv('REPO_TAG_NAME')}] does not match version [${BINJR_VERSION}]")
}

nexusStaging {
    username = System.getenv('OSSRH_JIRA_USERNAME')
    password = System.getenv('OSSRH_JIRA_PASSWORD')
    packageGroup = GROUP_ID
}

configure(subprojects) {
    if (project == project(':binjr-app'))
        apply plugin: 'application'
    else
        apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: "de.marcphilipp.nexus-publish"

    group GROUP_ID
    version BINJR_VERSION
    sourceCompatibility = 11
    targetCompatibility = 11
    description 'Flexible Time Series Visualization'
    compileJava.options.encoding = 'UTF-8'

    if (project != project(':binjr-app')) {
        project.javadoc {
            options.encoding = 'UTF-8'
            options.tags = ["XmlJavaTypeAdapter", "XmlJavaTypeAdapters"]
        }

        task javadocJar(type: Jar) {
            archiveClassifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        dependencies {
            compileOnly "org.openjfx:javafx-base:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
            compileOnly "org.openjfx:javafx-graphics:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
            compileOnly "org.openjfx:javafx-controls:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
            compileOnly "org.openjfx:javafx-fxml:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
            compileOnly "org.openjfx:javafx-swing:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name
                if (project != project(':binjr-app')) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                }
                pom {
                    name = project.name
                    description = 'A Time Series Data Browser'
                    url = 'https://binjr.eu'
                    if (project == project(':binjr-app')) {
                        packaging = 'pom'
                    } else {
                        packaging = 'jar'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'fthevenet'
                            name = 'Frederic Thevenet'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/binjr/binjr.git'
                        developerConnection = 'scm:git:https://github.com/binjr/binjr.git'
                        url = 'https://github.com/binjr/binjr'
                    }
                    if (project == project(':binjr-app')) {
                        withXml {
                            Node pluginNode = asNode().appendNode('build')
                                    .appendNode('plugins')
                                    .appendNode('plugin')
                            pluginNode.appendNode('groupId', 'org.codehaus.mojo')
                            pluginNode.appendNode('artifactId', 'exec-maven-plugin')
                            pluginNode.appendNode('version', '1.2.1')
                            pluginNode.appendNode('executions')
                                    .appendNode('execution')
                                    .appendNode('goals')
                                    .appendNode('goal', 'java')
                            pluginNode.appendNode('configuration')
                                    .appendNode('mainClass', 'eu.binjr.core.Bootstrap')

                            Node depsNode = asNode().appendNode('dependencies')
                            project.configurations.runtimeClasspath.each {
                                if (it.name.startsWith('binjr')) {
                                    Node depNode = depsNode.appendNode('dependency')
                                    depNode.appendNode('groupId', GROUP_ID)
                                    depNode.appendNode('artifactId', it.name.replace("-${BINJR_VERSION}.jar", ""))
                                    depNode.appendNode('version', BINJR_VERSION)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    nexusPublishing {
        packageGroup = rootProject.nexusStaging.packageGroup
        stagingProfileId = rootProject.nexusStaging.stagingProfileId
        username = rootProject.nexusStaging.username
        password = rootProject.nexusStaging.password
    }
}

task publishArtifacts(dependsOn: subprojects.publishToNexus) {
    if (IS_RELEASE) {
        //  finalizedBy(closeAndReleaseRepository)
    }
    doLast {
        System.out.println("Done publishing artifacts from subprojects.")
    }
}

task clean(type: Delete) {
    delete buildDir
}

task copyAppLibs(type: Copy) {
    into "$DISTRIBUTION_PATH/libs"
    from(project(":binjr-core").configurations.runtimeClasspath) {
        exclude "javafx-*.jar"
    }
    from project(":binjr-adapter-jrds").configurations.runtimeClasspath {
        exclude "javafx-*.jar"
    }
    from project(":binjr-adapter-csv").configurations.runtimeClasspath {
        exclude "javafx-*.jar"
    }
    from project(":binjr-adapter-rrd4j").configurations.runtimeClasspath {
        exclude "javafx-*.jar"
    }
    from project(":binjr-core").jar
}

task copyPluginLibs(type: Copy) {
    into "$DISTRIBUTION_PATH/plugins"
    from project(":binjr-adapter-jrds").jar
    from project(":binjr-adapter-csv").jar
    from project(":binjr-adapter-rrd4j").jar
}

task copyLauncher(type: Copy) {
    into DISTRIBUTION_PATH
    from "${projectDir}/distribution/platforms/${OS_FAMILY}"
}

task copyResources(type: Copy) {
    into "$DISTRIBUTION_PATH/resources"
    from "${projectDir}/distribution/resources"
}

task copyInfo(type: Copy) {
    from "${projectDir}/distribution/info"
    into "${buildDir}/tmp/info"

    def changeHistory = new File("./CHANGELOG.md").getText("utf-8")
    def currentChanges = new File("./UNRELEASED.md").getText("utf-8")
    expand(["version"       : "$BINJR_VERSION",
            "releaseDate"   : "${new SimpleDateFormat("EEE, d MMM yyyy").format(new Date())}",
            "changeHistory" : "$changeHistory",
            "currentChanges": "$currentChanges",
            "tagName"       : "v${BINJR_VERSION}"
    ])
}

markdownToHtml.dependsOn(copyInfo)

markdownToHtml {
    sourceDir = file("${buildDir}/tmp/info")
    outputDir = file("$DISTRIBUTION_PATH")
    doLast {
        ConfigurableFileTree tree = fileTree(dir: "$DISTRIBUTION_PATH")
        tree.include '**/*.html'
        tree.each { File file ->
            String path = file.path
            File newFile = new File("${DISTRIBUTION_PATH}/tmp_${file.name}")
            newFile << "<html lang=\"en\">\n" +
                    "<head>\n" +
                    "    <title>" + (file.name - ".html") + "</title>\n" +
                    "    <meta charset=\"utf-8\"/>\n" +
                    "    <link rel=\"stylesheet\" href=\"./resources/css/plain.css\">\n" +
                    "</head>"
            newFile << file.getText("utf-8")
            if (!file.name.startsWith("LICENSE")) {
                newFile << "<footer>\n" +
                        "    <br>\n" +
                        "    <hr>\n" +
                        "    <p style=\"text-align:left;\">\n" +
                        "        (c) 2016-2019 <a href=\"https://www.fthevenet.eu\">Frederic Thevenet</a>\n" +
                        "        <span style=\"float:right;\"><a href=\"https://binjr.eu\">https://binjr.eu</a></span>\n" +
                        "    </p>\n" +
                        "</footer>"
            }
            file.delete()
            newFile.renameTo(path)
        }
    }
}

task downloadopenJfxJmods(type: Download) {
    src OPENJFX_JMODS_DOWNLOAD_URL
    dest new File("${buildDir}/tmp", 'openjfx-jmods.zip')
}

task downloadAndUnzipFile(dependsOn: downloadopenJfxJmods, type: Copy) {
    from zipTree(downloadopenJfxJmods.dest)
    into buildDir
}

task createRuntimeImage(type: Exec, dependsOn: [downloadAndUnzipFile]) {
    workingDir project.projectDir
    commandLine = [
            "${JDK_HOME}/bin/jlink",
            '-p', "${JDK_HOME}/jmods${File.pathSeparator}${buildDir}/javafx-jmods-${OPENJFX_VERSION}",
            '--add-modules', JLINK_ADD_MODULES,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            "--vm=server",
            "--compress=2",
            '--output', "${DISTRIBUTION_PATH}/runtime"
    ]
    doLast {
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${DISTRIBUTION_PATH}/")
    }
}

task listPackageContent(type: Exec) {
    workingDir DISTRIBUTION_PATH
    commandLine = [
            "find",
            "-mindepth", "1",
            "-fprintf", ".installed", "%P\n"
    ]
}

task packageDistributionZip(type: Zip) {
    from DISTRIBUTION_ROOT
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.zip"
}

task compressDistributionTar(type: Tar, dependsOn: [listPackageContent]) {
    compression Compression.GZIP
    from DISTRIBUTION_ROOT
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.tar.gz"
}

task packageDistributionTar(type: Exec, dependsOn: [listPackageContent]) {
        workingDir DISTRIBUTION_ROOT
	commandLine = [
		"ln", "-s", "${BINJR_VERSION}/binjr", "binjr"
	]
        finalizedBy(compressDistributionTar)
}

task wixRunHeat(type: Exec, dependsOn: [packageDistributionZip]) {
    workingDir project.projectDir
    commandLine = [
            "${WIX_HOME}/bin/heat.exe",
            "dir", "${DISTRIBUTION_PATH}",
            "-cg", "binjrFiles",
            "-suid", "-gg", "-scom", "-sreg", "-sfrag", "-srd",
            "-dr", "APPLICATIONFOLDER",
            "-var", "var.buildSourceDir",
            "-out", "${buildDir}/wix/binjrFiles.wxs"
    ]
}

task wixRunCandle(type: Exec, dependsOn: [wixRunHeat]) {
    workingDir project.projectDir
    commandLine = [
            "${WIX_HOME}/bin/candle.exe",
            "-arch", "x64",
            "-out", "${buildDir}/wix/obj/",
            "${projectDir}/distribution/bundlers/windows/binjr.wxs",
            "${buildDir}/wix/binjrFiles.wxs",
            "-dbinjrVersion=${BINJR_VERSION_STEM}",
            "-dbuildSourceDir=${DISTRIBUTION_PATH}",
            "-dresourcesDir=${projectDir}/distribution"
    ]
}

task wixRunLight(type: Exec, dependsOn: [wixRunCandle]) {
    workingDir project.projectDir
    commandLine = [
            "${WIX_HOME}/bin/light.exe",
            "-sw", "-sice:ICE38", "-sice:ICE64",
            "-out", "${buildDir}/${DISTRIBUTION_NAME}.msi",
            "${buildDir}/wix/obj/*.wixobj",
            "-ext", "WixUtilExtension", "-ext", "WixUIExtension.dll"
    ]
}

task packageDistribution(dependsOn: [copyAppLibs, copyPluginLibs, copyResources, copyLauncher, markdownToHtml, createRuntimeImage]) {
    if (IS_WINDOWS) {
        finalizedBy(wixRunLight)
    } else {
        finalizedBy(packageDistributionTar)
    }
}
